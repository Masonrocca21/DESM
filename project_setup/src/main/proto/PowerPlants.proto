// powerplant.proto
syntax = "proto3";
option java_package = "com.example.powerplants";
option java_multiple_files = true;

package PowerPlants;

service PlantService {
    // Chiamata da una pianta a un'altra per decidere se soddisfare una richiesta energetica
    rpc HandleEnergyRequest (EnergyRequest) returns (EnergyResponse);
    rpc SendElection (ElectionMessage) returns (Ack);
    rpc SendElected (ElectedMessage) returns (Ack);
    rpc AnnouncePresence(PlantInfoMessage) returns (Ack);
    rpc PassElectionBaton(BatonMessage) returns (Ack);
}

message PlantInfoMessage {
    int32 id = 1;         // O string se l'ID è stringa
    string address = 2;
    int32 port_number = 3;
}

message EnergyRequest {
    int32 requestId = 1;
    int32 requiredEnergy = 2;
    int32 senderId = 3;
}


message EnergyResponse {
    bool canHandle = 1;
    string message = 2;
    int32 pollution = 3;         // livello di inquinamento
    int32 availableEnergy = 4;   // energia disponibile
}

message Ack {
    string message = 1;
}

message ElectionMessage {
    int32 candidateId = 1;       // chi è il migliore finora
    double candidateValue = 2;    // valore (es. inquinamento o energia disponibile)
    string currentElectionRequestId = 3;
    double requiredKwh = 4;
}

message ElectedMessage {
    int32 winnerId = 1;
    double winnerValue = 2;
    string currentElectionRequestId = 3;
    double requiredKwh = 4;
}

message BatonMessage {
    string request_id = 1;      // L'ID della richiesta di energia
    double kwh = 2;             // L'energia richiesta
    int32 initiator_id = 3;   // L'ID di chi ha INIZIATO il passaggio (per evitare loop)
}
